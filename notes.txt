                                -> W E B S E R V <-

Abstract :
            Network Programming AKA Socket Programming in c++.
            IPC also is equivalent to InterProcess Communication.

Network Programming :

    * Also known as Socker programming because the network programming 
    itself is based on sockets.

    * Definition :
        building a program that receives and transmits data between two or more
        computers by means of network.

* A simple understanding of Sockets :

    * Provided by the operating system within devices.
    * Sockets provides a high level of abstraction for programmers so that we dont have to worry about underlaying physical and software details of networking.

* The 5 "Must-know" fundamental details of socket programming :

---------------------------------------------------------------------------------------------------------

1. Socket :

    * Creating a socket (A socket descriptor)
        * TCP Socket can be compared to a phone -> We need a device to call someone or accept their phone call, right ?
        * To perform network I/O, the first thing a process must do is, call the socket function to create a specific type of socket by specifying the type of communication protocol desired, protocol family, etc.

        ```
        #include <sys/socket.h>
        
        int socket(int domain, int type, int protocol);
        
        ```
        -> Creating a socket descriptor.

---------------------------------------------------------------------------------------------------------

2. Bind :

    * Binding the Socket :
        * It is like registring a phone number to the phone (To connect to other phones)
        * Sockets do not have a complete address in the beginning to start transferring data,
        so we bind a socket to a port. -> Phones do not have a phone number at the beginning to make
        a phone call, so we register a phone number.
    * The process of allocatin a port number to socket is called 'binding'.
    ```
    #include <sys/socket.h>
    
    int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen);
    
    ```
    -> Binding a request to TCP/IP indicating that is is ready to receive/send information.

---------------------------------------------------------------------------------------------------------

3. Listen :

    * Listening for connection requests :
        
        * Identifying a bound, unconnected socket -> Means "identify the connection request".
        
        * The process of converting unconnected socket into a passive socket,
        indicating the Kernel should accept incoming connection requests directed to this socket.

    ```
    # include <sys/socket.h>

    int listen(int sockfd, int backlog);

    ```
    -> Listening for connection requests.

---------------------------------------------------------------------------------------------------------

4. Accept :

    * Accept an incoming connection request :

        * Transition of the request from listen() method to an actual Socket -> Means "Accept the 
        connection request".

        * After accepting the request (And automattic creation of socket), the data can be finally
        transferred between nodes.

        ```
        #include <sys/socket.h>

        int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

        ```
---------------------------------------------------------------------------------------------------------
                                        ->  LOGICAL SEQUENCING : <-
---------------------------------------------------------------------------------------------------------

* STEP 1 : Creating a socket (Socket function call).
* STEP 2 : Bind the socket to a port (Bind function call).
* STEP 3 : Listen for incoming connection requests and identify ones (Listen function call).
* STEP 4 : Accept the identified connection request and open the socket (Accept function call).

---------------------------------------------------------------------------------------------------------

5. Connect :

    * Attempting to establish a connection (request to connect)
        
        * it's like dialing to a specifc phone number.

        * The implementation of requesting to connect is very simple, unlike listening and
        accepting a socket.

        * To make a connection request, just specify the address to connect to and the socket 
        descriptor to attacj the socket to.

    ```
    #include <sys/socket.h>

    int connect(int sockfd, struct sockaddr *serv_addr, socklen_t addrlen);

    ```
    -> Making a connection request.

---------------------------------------------------------------------------------------------------------

--> Creating A simple client/Server code base : SEE  /SocketProgramming/tcpServer.c && /SocketProgramming/TcpClient.c

---------------------------------------------------------------------------------------------------------